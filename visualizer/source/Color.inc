//******************************************************************************
inline Real Color::r() const
{
	return m_adC[0];
}
//******************************************************************************
inline Real Color::g() const
{
	return m_adC[1];
}
//******************************************************************************
inline Real Color::b() const
{
	return m_adC[2];
}
//******************************************************************************
inline Real Color::a() const
{
	return m_adC[3];
}
//******************************************************************************
inline Real& Color::r()
{
	return m_adC[0];
}
//******************************************************************************
inline Real& Color::g()
{
	return m_adC[1];
}
//******************************************************************************
inline Real& Color::b()
{
	return m_adC[2];
}
//******************************************************************************
inline Real& Color::a()
{
	return m_adC[3];
}
//******************************************************************************
inline Real Color::operator[](UInt uiC) const
{
	if( uiC < 4 )
		return m_adC[uiC];
	else
		return 0.0;
}
//******************************************************************************
inline Real Color::operator()(UInt uiC) const
{
	if( uiC < 4 )
		return m_adC[uiC];
	else
		return 0.0;
}
//******************************************************************************
inline Real& Color::operator[](UInt uiC)
{
	if( uiC < 4 )
		return m_adC[uiC];
	else
		return m_adC[0];
}
//******************************************************************************
inline Real& Color::operator()(UInt uiC)
{
	if( uiC < 4 )
		return m_adC[uiC];
	else
		return m_adC[0];
}
//******************************************************************************
inline Real Color::getComponent(UInt uiC) const
{
	if( uiC < 4 )
		return m_adC[uiC];
	else
		return 0.0;
}
//******************************************************************************
inline const Color& Color::value()
{
	return *this;
}
//******************************************************************************
inline Real* Color::values()
{
	return m_adC;
}
//******************************************************************************
inline void Color::set(const Color& v)
{
	m_adC[0] = v.m_adC[0];
	m_adC[1] = v.m_adC[1];
	m_adC[2] = v.m_adC[2];
	m_adC[3] = v.m_adC[3];
}
//******************************************************************************
inline void Color::set(Real r, Real g, Real b, Real a)
{
	m_adC[0] = r;
	m_adC[1] = g;
	m_adC[2] = b;
	m_adC[3] = a;
}
//******************************************************************************
inline void Color::setRed(Real r)
{
	m_adC[0] = r;
}
//******************************************************************************
inline void Color::setGreen(Real g)
{
	m_adC[1] = g;
}
//******************************************************************************
inline void Color::setBlue(Real b)
{
	m_adC[2] = b;
}
//******************************************************************************
inline void Color::setAlpha(Real a)
{
	m_adC[3] = a;
}
//******************************************************************************
inline void Color::setComponent(Real n, UInt c)
{
	if( c < 4 )
		m_adC[c] = n;
}
//******************************************************************************
inline void Color::zero()
{
	m_adC[0] = 0.0;
	m_adC[1] = 0.0;
	m_adC[2] = 0.0;
	m_adC[3] = 1.0;
}
//******************************************************************************
inline void Color::negate()
{
	m_adC[0] = -m_adC[0];
	m_adC[1] = -m_adC[1];
	m_adC[2] = -m_adC[2];
	m_adC[3] = -m_adC[3];
}
//******************************************************************************
